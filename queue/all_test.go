package queue

// Code generated by all_gen.go; DO NOT EDIT.

//go:generate go run all_gen.go -out all_test.go

import (
	"flag"
	"strconv"
	"testing"
)

var _ = strconv.Itoa
var runbroken = flag.Bool("broken", false, "run only broken implementations")

func broken(t *testing.T) {
	t.Helper()
	if !*runbroken {
		t.Skip("broken")
	}
}

var _ MPMC = (*MPMCc_go)(nil)
var _ NonblockingMPMC = (*MPMCc_go)(nil)

func TestMPMCc_go(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewMPMCc_go(size) })
	})
}

func BenchmarkMPMCc_go(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewMPMCc_go(size) })
	})
}

var _ MPMC = (*MPMCq_go)(nil)
var _ NonblockingMPMC = (*MPMCq_go)(nil)

func TestMPMCq_go(t *testing.T) {
	broken(t)
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewMPMCq_go(size) })
	})
}

func BenchmarkMPMCq_go(b *testing.B) {
	b.Skip("broken")
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewMPMCq_go(size) })
	})
}

var _ SPSC = (*SPSCr_mc)(nil)

func TestSPSCr_mc(t *testing.T) {
	broken(t)
	for _, batchSize := range BatchSizes {
		t.Run(strconv.Itoa(batchSize), func(t *testing.T) {
			test(t, func(size int) Queue { return NewSPSCr_mc(batchSize, size) })
		})
	}
}

func BenchmarkSPSCr_mc(b *testing.B) {
	b.Skip("broken")
	for _, batchSize := range BatchSizes {
		b.Run(strconv.Itoa(batchSize), func(b *testing.B) {
			bench(b, func(size int) Queue { return NewSPSCr_mc(batchSize, size) })
		})
	}
}

var _ SPSC = (*SPSCrs_mc)(nil)

func TestSPSCrs_mc(t *testing.T) {
	broken(t)
	for _, batchSize := range BatchSizes {
		t.Run(strconv.Itoa(batchSize), func(t *testing.T) {
			test(t, func(size int) Queue { return NewSPSCrs_mc(batchSize, size) })
		})
	}
}

func BenchmarkSPSCrs_mc(b *testing.B) {
	b.Skip("broken")
	for _, batchSize := range BatchSizes {
		b.Run(strconv.Itoa(batchSize), func(b *testing.B) {
			bench(b, func(size int) Queue { return NewSPSCrs_mc(batchSize, size) })
		})
	}
}

var _ MPSC = (*MPSCr_mc)(nil)

func TestMPSCr_mc(t *testing.T) {
	broken(t)
	for _, batchSize := range BatchSizes {
		t.Run(strconv.Itoa(batchSize), func(t *testing.T) {
			test(t, func(size int) Queue { return NewMPSCr_mc(batchSize, size) })
		})
	}
}

func BenchmarkMPSCr_mc(b *testing.B) {
	b.Skip("broken")
	for _, batchSize := range BatchSizes {
		b.Run(strconv.Itoa(batchSize), func(b *testing.B) {
			bench(b, func(size int) Queue { return NewMPSCr_mc(batchSize, size) })
		})
	}
}

var _ SPSC = (*SPSCns_dv)(nil)
var _ NonblockingSPSC = (*SPSCns_dv)(nil)

func TestSPSCns_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewSPSCns_dv() })
	})
}

func BenchmarkSPSCns_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewSPSCns_dv() })
	})
}

var _ MPSC = (*MPSCns_dv)(nil)
var _ NonblockingMPSC = (*MPSCns_dv)(nil)

func TestMPSCns_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewMPSCns_dv() })
	})
}

func BenchmarkMPSCns_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewMPSCns_dv() })
	})
}

var _ MPSC = (*MPSCnsi_dv)(nil)
var _ NonblockingMPSC = (*MPSCnsi_dv)(nil)

func TestMPSCnsi_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewMPSCnsi_dv() })
	})
}

func BenchmarkMPSCnsi_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewMPSCnsi_dv() })
	})
}

var _ MPMC = (*MPMCqs_dv)(nil)
var _ NonblockingMPMC = (*MPMCqs_dv)(nil)

func TestMPMCqs_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewMPMCqs_dv(size) })
	})
}

func BenchmarkMPMCqs_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewMPMCqs_dv(size) })
	})
}

var _ MPMC = (*MPMCqsp_dv)(nil)
var _ NonblockingMPMC = (*MPMCqsp_dv)(nil)

func TestMPMCqsp_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewMPMCqsp_dv(size) })
	})
}

func BenchmarkMPMCqsp_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewMPMCqsp_dv(size) })
	})
}

var _ SPMC = (*SPMCqs_dv)(nil)
var _ NonblockingSPMC = (*SPMCqs_dv)(nil)

func TestSPMCqs_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewSPMCqs_dv(size) })
	})
}

func BenchmarkSPMCqs_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewSPMCqs_dv(size) })
	})
}

var _ SPMC = (*SPMCqsp_dv)(nil)
var _ NonblockingSPMC = (*SPMCqsp_dv)(nil)

func TestSPMCqsp_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewSPMCqsp_dv(size) })
	})
}

func BenchmarkSPMCqsp_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewSPMCqsp_dv(size) })
	})
}

var _ SPSC = (*SPSCqs_dv)(nil)
var _ NonblockingSPSC = (*SPSCqs_dv)(nil)

func TestSPSCqs_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewSPSCqs_dv(size) })
	})
}

func BenchmarkSPSCqs_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewSPSCqs_dv(size) })
	})
}

var _ SPSC = (*SPSCqsp_dv)(nil)
var _ NonblockingSPSC = (*SPSCqsp_dv)(nil)

func TestSPSCqsp_dv(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewSPSCqsp_dv(size) })
	})
}

func BenchmarkSPSCqsp_dv(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewSPSCqsp_dv(size) })
	})
}

var _ SPSC = (*SPSCrs_one)(nil)

func TestSPSCrs_one(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewSPSCrs_one(size) })
	})
}

func BenchmarkSPSCrs_one(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewSPSCrs_one(size) })
	})
}

var _ SPMC = (*SPMCrs_one)(nil)

func TestSPMCrs_one(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewSPMCrs_one(size) })
	})
}

func BenchmarkSPMCrs_one(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewSPMCrs_one(size) })
	})
}

var _ MPSC = (*MPSCrs_one)(nil)

func TestMPSCrs_one(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewMPSCrs_one(size) })
	})
}

func BenchmarkMPSCrs_one(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewMPSCrs_one(size) })
	})
}

var _ MPSC = (*MPSCnw_fl)(nil)

func TestMPSCnw_fl(t *testing.T) {
	t.Run("0", func(t *testing.T) {
		test(t, func(size int) Queue { return NewMPSCnw_fl() })
	})
}

func BenchmarkMPSCnw_fl(b *testing.B) {
	b.Run("0", func(b *testing.B) {
		bench(b, func(size int) Queue { return NewMPSCnw_fl() })
	})
}
